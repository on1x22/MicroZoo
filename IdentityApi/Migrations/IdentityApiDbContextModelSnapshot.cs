// <auto-generated />
using System;
using MicroZoo.IdentityApi.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MicroZoo.IdentityApi.Migrations
{
    [DbContext(typeof(IdentityApiDbContext))]
    partial class IdentityApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MicroZoo.Infrastructure.Models.Roles.Requirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Requirements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1de0641-d730-4207-84be-ff27d6477229"),
                            Deleted = false,
                            Name = "IdentityApi.Read"
                        },
                        new
                        {
                            Id = new Guid("b0e4d6a8-b603-4404-8340-68ef6c27cbb2"),
                            Deleted = false,
                            Name = "IdentityApi.Create"
                        },
                        new
                        {
                            Id = new Guid("def637f0-5d66-4f0f-b2f0-558883d6144e"),
                            Deleted = false,
                            Name = "IdentityApi.Update"
                        },
                        new
                        {
                            Id = new Guid("bed6d2dc-e231-43e2-8ee7-553a8e3db5b0"),
                            Deleted = false,
                            Name = "IdentityApi.Delete"
                        });
                });

            modelBuilder.Entity("MicroZoo.Infrastructure.Models.Roles.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e78f1a28-5a42-496a-adb2-9e5f70b51fc8",
                            Deleted = false,
                            Description = "The visitor role for the user",
                            Name = "First visitor",
                            NormalizedName = "FIRST VISITOR"
                        },
                        new
                        {
                            Id = "c28c85a9-80ca-4768-993d-80a9410606c5",
                            Deleted = false,
                            Description = "The admin role for the user",
                            Name = "First admin",
                            NormalizedName = "FIRST ADMIN"
                        });
                });

            modelBuilder.Entity("MicroZoo.Infrastructure.Models.Roles.RoleRequirement", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<Guid>("RequirementId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "RequirementId");

                    b.HasIndex("RequirementId");

                    b.ToTable("RoleRequirements");

                    b.HasData(
                        new
                        {
                            RoleId = "c28c85a9-80ca-4768-993d-80a9410606c5",
                            RequirementId = new Guid("b1de0641-d730-4207-84be-ff27d6477229")
                        },
                        new
                        {
                            RoleId = "c28c85a9-80ca-4768-993d-80a9410606c5",
                            RequirementId = new Guid("b0e4d6a8-b603-4404-8340-68ef6c27cbb2")
                        },
                        new
                        {
                            RoleId = "c28c85a9-80ca-4768-993d-80a9410606c5",
                            RequirementId = new Guid("def637f0-5d66-4f0f-b2f0-558883d6144e")
                        },
                        new
                        {
                            RoleId = "c28c85a9-80ca-4768-993d-80a9410606c5",
                            RequirementId = new Guid("bed6d2dc-e231-43e2-8ee7-553a8e3db5b0")
                        });
                });

            modelBuilder.Entity("MicroZoo.Infrastructure.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "081cb69e-d710-470f-9971-96fc9df25db8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb0959bb-77c2-4718-bd2f-fafc90566969",
                            Deleted = false,
                            EmailConfirmed = false,
                            FirstName = "First",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedUserName = "FIRST USER",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "16fefc12-7a36-4aea-bacf-6dfba841f656",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "870db52f-33c0-44e1-a861-0602a1a998ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4463637b-6d5f-43c6-93c2-295348dd8471",
                            Deleted = false,
                            EmailConfirmed = false,
                            FirstName = "First",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "FIRST ADMIN",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "d82c594f-9973-4806-8452-0900cb5586f6",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "081cb69e-d710-470f-9971-96fc9df25db8",
                            RoleId = "e78f1a28-5a42-496a-adb2-9e5f70b51fc8"
                        },
                        new
                        {
                            UserId = "870db52f-33c0-44e1-a861-0602a1a998ce",
                            RoleId = "c28c85a9-80ca-4768-993d-80a9410606c5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MicroZoo.Infrastructure.Models.Roles.RoleRequirement", b =>
                {
                    b.HasOne("MicroZoo.Infrastructure.Models.Roles.Requirement", "Requirement")
                        .WithMany("RoleRequirements")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroZoo.Infrastructure.Models.Roles.Role", "Role")
                        .WithMany("RoleRequirements")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirement");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MicroZoo.Infrastructure.Models.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MicroZoo.Infrastructure.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MicroZoo.Infrastructure.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MicroZoo.Infrastructure.Models.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroZoo.Infrastructure.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MicroZoo.Infrastructure.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MicroZoo.Infrastructure.Models.Roles.Requirement", b =>
                {
                    b.Navigation("RoleRequirements");
                });

            modelBuilder.Entity("MicroZoo.Infrastructure.Models.Roles.Role", b =>
                {
                    b.Navigation("RoleRequirements");
                });
#pragma warning restore 612, 618
        }
    }
}
